module SchnorrSig
  # placeholder for ECDSA types
  type ec_group = untyped
  type ec_point = untyped

  class SanityCheck < Error
  end
  class VerifyFail < Error
  end
  class InfinityPoint < Error
  end

  GROUP: ec_group
  P: Integer
  N: Integer
  B: Integer

  module Pure
    def random_bytes: (Integer count) -> String
    def point: (Integer int) -> ec_point
    def select_even_y: (ec_point point, Integer even_val) -> Integer
    def int: (String x) -> Integer
    def bytes: (Integer | ec_point val) -> String
    def lift_x: (Integer x) -> ec_point
    def tagged_hash: (String tag, String msg) -> String
    def pubkey: (String sk) -> String
    def keypair: -> [String, String]
    def sign: (String sk, String m, ?auxrand: nil) -> String
    def verify?: (String pk, String m, String sig) -> bool
  end
end
