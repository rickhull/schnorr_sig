module SchnorrSig
  module Nostr
    def self.string!: (untyped str) -> String
    def self.integer!: (untyped int) -> Integer
    def self.array!: (untyped ary, ?Integer? length) -> Array[untyped]
    def self.binary!: (untyped str, ?Integer? length) -> String
    def self.hex!: (untyped str, ?Integer? length) -> String

    JSON_OPTIONS: Hash[Symbol, bool | String | Integer]

    def self.parse: (String json) -> (Hash[untyped, untyped] | Array[untyped])
    def self.json: ((Hash[untyped, untyped] | Array[untyped]) object) -> String

    class Event
      type tags = Array[Array[String]]
      type values = String | Integer | tags

      class Error < RuntimeError
      end
      class KeyError < Error
      end
      class TypeError < Error
      end

      KINDS: Hash[Symbol, Integer]
      def self.kind: ((Integer | Symbol) val) -> Integer
      def self.tags!: (Array[untyped]) -> Array[Array[String]]

      @content: String
      @kind: Integer
      @pubkey: String
      @tags: tags
      @created_at: Integer
      @digest: String?
      @signature: String?

      attr_reader content: String
      attr_reader kind: Integer
      attr_reader created_at: Integer
      attr_reader pubkey: String
      attr_reader signature: String?

      def initialize: (?String content,
                       pubkey: String,
		       ?kind: Integer | Symbol) -> void

      def serialize: () -> [0, String, Integer, Integer,
                            tags, String]
      def to_s: () -> String
      def digest: (?memo: bool) -> String
      def id: () -> String
      def sign: (String secret_key) -> String
      def signed?: () -> bool
      def signed!: () -> bool
      def sig: () -> String?
      def to_h: () -> Hash[Symbol, values]
      def to_json: () -> String

      def add_tag: (String tag, String value, *String rest) -> tags
      def ref_event: (String eid_hex, *String rest) -> tags
      def ref_pubkey: (String pk_hex, *String rest) -> tags
      def ref_replace: (*String rest, kind: Integer,
        ?pubkey: String?, ?pk: String?, ?d_tag: String) -> tags
    end

    class Device
      type hash = {
        id: String,
        pubkey: String,
        content: String,
        sig: String,
        tags: Event::tags,
        created_at: Integer,
        kind: Integer
      }

      class Error < RuntimeError
      end
      class IdCheck < Error
      end
      class SignatureCheck < Error
      end

      def self.hash: (String json_str) -> hash
      def self.serialize: (hash hash) -> String
      def self.verify: (String json_str, ?check_id: bool) -> hash

      @pubkey: String
      attr_reader pubkey: String

      def initialize: (?pubkey: String?, ?pk: String?) -> void

      def pk: () -> String

      def text_note: (String content) -> Nostr::Event

      def set_metadata: (**Hash[Symbol, String] kwargs) -> Event
      alias profile set_metadata

      def contact_list: (Hash[String, Array[String]] pubkey_hsh) -> Event
      alias follows contact_list

      def encrypted_text_message: (String content) -> Event
      alias direct_msg encrypted_text_message
    end
  end
end
